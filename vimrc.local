set number
set wildmenu
set path+=**
set autowrite
set mouse=a

" increase max memory to show syntax highlighting for large files
set maxmempattern=20000

" ~/.viminfo needs to be writable and readable. Set oldfiles to 1000 last
" recently opened files, :FzfHistory uses it
set viminfo='1000

if has('persistent_undo')
   set undofile
   set undodir=~/.cache/vim
endif

" Enable Ctrl+c and Ctrl+v for copy and paste in vim
"vmap <C-c> "+yi
"vmap <C-x> "+c
"vmap <C-v> c<ESC>"+p
"imap <C-v> <ESC>"+pa
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
set clipboard^=unnamed
set clipboard^=unnamedplus
"vmap <C-c> :w !pbcopy<CR><CR>

" ==================== FZF ====================
let g:fzf_layout = { 'down': '~35%' }

" search
nmap <C-d> :History<CR>
imap <C-d> <esc>:<C-u>History<CR>

" search Buffers
nmap <C-b> :Buffers<CR>
imap <C-b> <esc>:<C-u>Buffers<CR>

" search across files in the project root directory
nmap <C-a> :ProjectRootExe Files<CR>
imap <C-a> <esc>:ProjectRootExe Files<CR>

let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
  \ -g "*.{js,json,php,md,styl,jade,html,config,py,cpp,c,go,hs,rb,conf}"
  \ -g "!{.git,node_modules,vendor}/*" '

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

command! -bang -nargs=* F call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

" fzf
" set rtp+=/usr/local/bin/fzf
"nnoremap  <C-a> <ESC>:Files<CR>
"nnoremap  <C-b> <ESC>:Buffers<CR>
"nnoremap  <C-d> <ESC>:History<CR>

" Some useful quickfix shortcuts for quickfix
map <leader>n :cn<CR>
map <leader>p :cp<CR>
nmap <leader>a :cclose<CR>

" Format JSON
com! FormatJSON %!jq .
nmap =j :FormatJSON<CR>

" Fast saving
nnoremap <leader>w :w!<CR>
nnoremap <silent> <leader>wq :wq!<CR>
nnoremap <silent> <leader>q :q!<CR>
nnoremap <silent> <leader>qa :qa!<CR>

" Close all but the current one
nnoremap <leader>o :only<CR>
nnoremap <leader><leader>c :close<CR>


" Better split switching
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
map <C-w> <C-W>w

" Print full path
map <leader>f :echo expand("%:p")<CR>

" NERDTree autostart
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" ==================== Completion + Snippet ====================
" " Ultisnips has native support for SuperTab. SuperTab does omnicompletion by
" " pressing tab. I like this better than autocompletion, but it's still fast.
"let g:SuperTabDefaultCompletionType = context
"let g:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']
"let g:UltiSnipsExpandTrigger="<tab>"
"let g:UltiSnipsJumpForwardTrigger="<tab>"
"let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" ==================== vim-go ====================
let g:go_fmt_fail_silently = 1
let g:go_fmt_command = "goimports"
let g:go_debug_windows = {
      \ 'vars':  'leftabove 35vnew',
      \ 'stack': 'botright 10new',
\ }
let g:go_list_type = "quickfix"
let g:go_autodetect_gopath = 1

let g:go_info_mode = 'gopls'
let g:go_rename_command='gopls'
let g:go_implements_mode='gopls'
let g:go_diagnostics_enabled = 1
let g:go_doc_popup_window = 1

let g:go_decls_mode = 'fzf'

let g:go_modifytags_transform = 'camelcase'
let g:go_fold_enable = []

let g:go_metalinter_command = 'golangci-lint' "golangci-lint
let g:go_gopls_staticcheck = 1
let g:go_metalinter_autosave = 1
let g:go_metalinter_deadline = '5s'

nmap <C-g> :GoDecls<CR>
imap <C-g> <esc>:<C-u>GoDecls<CR>


" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

augroup go
  autocmd!

  autocmd FileType go nmap <silent> <Leader>v <Plug>(go-def-vertical)
  autocmd FileType go nmap <silent> <Leader>s <Plug>(go-def-split)
  autocmd FileType go nmap <silent> <Leader>d <Plug>(go-def-tab)

  autocmd FileType go nmap <silent> <Leader>x <Plug>(go-doc-vertical)

  autocmd FileType go nmap <silent> <Leader>i <Plug>(go-info)
  autocmd FileType go nmap <silent> <Leader>l <Plug>(go-metalinter)

  autocmd FileType go nmap <silent> <leader>b :<C-u>call <SID>build_go_files()<CR>
  autocmd FileType go nmap <silent> <leader>t  <Plug>(go-test)
  autocmd FileType go nmap <silent> <leader>r  <Plug>(go-run)
  autocmd FileType go nmap <silent> <leader>e  <Plug>(go-install)

  autocmd FileType go nmap <silent> <Leader>c <Plug>(go-coverage-toggle)

  " I like these more!
  autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
  autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
  autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
  autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
  let g:neosnippet#snippets_directory='~/.vim/bundle/vim-go/gosnippets/snippets/'
augroup END

" Use deoplete.
let g:deoplete#enable_at_startup = 1

nnoremap <silent> <leader>ff :ProjectRootExe Files<cr>

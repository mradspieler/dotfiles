set number
set wildmenu
set path+=**
set autowrite
set mouse=a

" increase max memory to show syntax highlighting for large files
set maxmempattern=20000

" ~/.viminfo needs to be writable and readable. Set oldfiles to 1000 last
" recently opened files, :FzfHistory uses it
set viminfo='1000

if has('persistent_undo')
   set undofile
   set undodir=~/.cache/vim
endif

" Enable Ctrl+c and Ctrl+v for copy and paste in vim
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
set clipboard=unnamed


" search across files in the project root directory
nmap <C-a> :ProjectRootExe Files<CR>
imap <C-a> <esc>:ProjectRootExe Files<CR>

let g:rg_command = '
  \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
  \ -g "*.{js,json,php,md,styl,jade,html,config,py,cpp,c,go,hs,rb,conf}"
  \ -g "!{.git,node_modules,vendor}/*" '

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

command! -bang -nargs=* F call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

" Some useful quickfix shortcuts for quickfix
map <leader>n :cn<CR>
map <leader>p :cp<CR>
nmap <leader>a :cclose<CR>

" Format JSON
com! FormatJSON %!jq .
nmap =j :FormatJSON<CR>

" Fast saving
nnoremap <leader>w :w!<CR>
nnoremap <silent> <leader>wq :wq!<CR>
nnoremap <silent> <leader>q :q!<CR>
nnoremap <silent> <leader>qa :qa!<CR>

" Close all but the current one
nnoremap <leader>o :only<CR>
nnoremap <leader><leader>c :close<CR>

" Better split switching
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
map <C-w> <C-W>w

" Print full path
map <leader>f :echo expand("%:p")<CR>

" NERDTree autostart
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
nnoremap <leader>ntf :NERDTreeFocus<CR>
nnoremap <leader>nt :NERDTree<CR>
nnoremap <leader>ntt :NERDTreeToggle<CR>
nnoremap <leader>fi :NERDTreeFind<CR>

" ==================== gruvbox ====================
color gruvbox
"let g:gruvbox_contrast_light = 'medium'
"let g:gruvbox_invert_indent_guides = 1
"set bg=light


let g:coc_global_extensions = ['coc-json', 'coc-snippets',  'coc-css', 'coc-html', 'coc-htmlhint', 'coc-pairs, 'coc-sh', 'coc-sql', 'coc-go', 'coc-yaml',  'coc-coverage']
